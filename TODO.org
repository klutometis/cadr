#+TITLE: TODO
* TODO Also generate docstrings.
* TODO [[http://en.wikipedia.org/wiki/Kleene_star][Kleene-closure]]
  See also: [[http://en.wikipedia.org/wiki/String_(computer_science)#Formal_theory][string]].

  #+BEGIN_SRC clojure :tangle kleene-closure.clj :shebang #!/usr/bin/env clj
    (use 'clojure.test)
    (use 'add-classpath.core)
    (use 'debug.core)
    
    (add-classpath "lib/math.combinatorics-0.0.3-SNAPSHOT.jar")
    (use 'clojure.math.combinatorics)
    
    (defn kleene-closure
      ([alphabet] (kleene-closure alphabet (count alphabet)))
      ([alphabet upper-bound]
         (kleene-closure alphabet upper-bound 0))
      ([alphabet upper-bound lower-bound]
         (loop [n upper-bound
                kleene-closure '()]
           (if (< n lower-bound)
             kleene-closure
             (let [kleene-n (selections alphabet n)]
               (recur (dec n)
                      (concat kleene-n kleene-closure)))))))
    
    (def Î£ kleene-closure)
    
    (is (= (kleene-closure '[a d] 4)
           '(()
             (a)
             (d)
             (a a)
             (a d)
             (d a)
             (d d)
             (a a a)
             (a a d)
             (a d a)
             (a d d)
             (d a a)
             (d a d)
             (d d a)
             (d d d)
             (a a a a)
             (a a a d)
             (a a d a)
             (a a d d)
             (a d a a)
             (a d a d)
             (a d d a)
             (a d d d)
             (d a a a)
             (d a a d)
             (d a d a)
             (d a d d)
             (d d a a)
             (d d a d)
             (d d d a)
             (d d d d))))
    
  #+END_SRC
* TODO Definitions
  #+BEGIN_SRC clojure :tangle definitions.clj :shebang #!/usr/bin/env clj
    (load-file "kleene-closure.clj")
    
    ;;; Primitives
    (def car first)
    (def cdr rest)
    
    (def ^{:private true}
      infix->primitive
      '{a car
        d cdr})
    
    (defn- infixes->composition [string]
      (cons 'comp (map #(% infix->primitive) string)))
    
    (defn- infixes->name [string]
      (apply (comp symbol str)
             (list "c" (apply str string) "r")))
    
    (def name->composition
      ^{:private true}
      (map #(cons (infixes->name %)
                  (infixes->composition %))
           (kleene-closure '(a d) 4 2)))
    
    (defmacro
      ^{:private true}
      defn-compositions []
      `(do ~@(map (fn [[name & composition]]
                    `(defn ~name [cons#] (~composition cons#)))
                  name->composition)))
    
    (defn-compositions)
    
    (doseq [[name comp & composition] name->composition]
      (printf "(%s l) -> %s\n" name (loop [composition (reverse composition)
                                           expansion 'l]
                                      (if (empty? composition)
                                        expansion
                                        (recur (cdr composition)
                                               (list (car composition) expansion))))))
    (debug (cadr '(1 2 3)))
    
  #+END_SRC

  Macro to create definitions:

  #+BEGIN_SRC clojure :tangle def-def.clj :shebang #!/usr/bin/env clj
    (use 'debug.core)
    
    (defmacro harro []
      `(def a 2))
    
    (defmacro ohjes []
      `(defn b [] 2))
    
    (debug (harro)
           a
           (ohjes)
           (b))
    
  #+END_SRC
